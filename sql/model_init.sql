-- Tabla: rol
CREATE TABLE rol (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL UNIQUE
);

-- Tabla: usuario
CREATE TABLE usuario (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    correo VARCHAR2(100) NOT NULL UNIQUE,
    contrasenia VARCHAR2(200) NOT NULL,
    estado VARCHAR2(20) DEFAULT 'PENDIENTE' 
        CHECK (estado IN ('ACTIVO', 'PENDIENTE', 'BLOQUEADO')),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabla: token
CREATE TABLE token (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    token VARCHAR2(500) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_expiracion TIMESTAMP,
    valido CHAR(1) DEFAULT 'S' 
        CHECK (valido IN ('S', 'N')),
    CONSTRAINT fk_token_usuario FOREIGN KEY (id_usuario) REFERENCES usuario(id) ON DELETE CASCADE
);

-- Tabla: usuario_rol
CREATE TABLE usuario_rol (
    id_usuario NUMBER PRIMARY KEY,
    id_rol NUMBER NOT NULL,
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES usuario(id) ON DELETE CASCADE,
    CONSTRAINT fk_rol FOREIGN KEY (id_rol) REFERENCES rol(id)
);

-- Tabla: tipo_pregunta
CREATE TABLE tipo_pregunta (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50)
);

-- Tabla: PlanEstudio
CREATE TABLE plan_estudio (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100)
);

-- Tabla: Unidad
CREATE TABLE unidad (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    plan_estudio_id NUMBER,
    CONSTRAINT fk_unidad_plan FOREIGN KEY (plan_estudio_id) REFERENCES plan_estudio(id)
);

-- Tabla: Contenido
CREATE TABLE contenido (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    unidad_id NUMBER,
    CONSTRAINT fk_contenido_unidad FOREIGN KEY (unidad_id) REFERENCES unidad(id)
);

-- Tabla: Tema
CREATE TABLE tema (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100),
    contenido_id NUMBER,
    CONSTRAINT fk_tema_contenido FOREIGN KEY (contenido_id) REFERENCES contenido(id)
);

-- Tabla: banco_preguntas
CREATE TABLE banco_preguntas (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    enunciado CLOB,
    tipo_pregunta_id NUMBER,
    respuesta_correcta CLOB,
    respuesta_correcta_opcion_id NUMBER,
    es_publica CHAR(1) CHECK (es_publica IN ('S', 'N')),
    dificultad VARCHAR2(10) CHECK (dificultad IN ('facil', 'media', 'dificil')),
    tasa_respuesta_correcta NUMBER(5,2),
    requiere_revision CHAR(1) CHECK (requiere_revision IN ('S', 'N')),
    usuario_id NUMBER,
    tema_id NUMBER,
    CONSTRAINT fk_tipo_pregunta FOREIGN KEY (tipo_pregunta_id) REFERENCES tipo_pregunta(id),
    CONSTRAINT fk_usuario_banco FOREIGN KEY (usuario_id) REFERENCES usuario(id),
    CONSTRAINT fk_tema FOREIGN KEY (tema_id) REFERENCES tema(id)
);

-- Tabla: opcion_respuesta
CREATE TABLE opcion_respuesta (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    pregunta_id NUMBER,
    texto CLOB,
    es_correcta CHAR(1) CHECK (es_correcta IN ('S', 'N')),
    CONSTRAINT fk_pregunta_opcion FOREIGN KEY (pregunta_id) REFERENCES banco_preguntas(id) ON DELETE CASCADE
);

-- Tabla: sub_pregunta
CREATE TABLE sub_pregunta (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    pregunta_padre_id NUMBER,
    enunciado CLOB,
    porcentaje NUMBER(5,2),
    tipo_subpregunta VARCHAR2(100),
    respuesta_correcta CLOB,
    tiempo_maximo NUMBER,
    CONSTRAINT fk_sub_pregunta FOREIGN KEY (pregunta_padre_id) REFERENCES banco_preguntas(id) ON DELETE CASCADE
);

-- Tabla: respuesta_correcta
CREATE TABLE respuesta_correcta (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    banco_pregunta_id NUMBER,
    sub_pregunta_id NUMBER,
    texto CLOB,
    CONSTRAINT fk_respuesta_correcta_pregunta FOREIGN KEY (banco_pregunta_id) REFERENCES banco_preguntas(id) ON DELETE CASCADE,
    CONSTRAINT fk_respuesta_correcta_sub FOREIGN KEY (sub_pregunta_id) REFERENCES sub_pregunta(id) ON DELETE CASCADE
);